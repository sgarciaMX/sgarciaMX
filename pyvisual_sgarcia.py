# -*- coding: utf-8 -*-
"""PYvisual_sgarcia.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tr_buW3p7IUSFsdZToy0UL8qYYclCIdL

Se presenta ejemplo de visualización de datos usando Python y las herramientas MatplotLib, Pandas y NumPy.

La visualización muestra el porcente de áreas en condiciones de sequía para la zona occidente de US con datos del monitor de sequías (U.S. Drought Monitor).

**Configuración**

Descarga de fuentes y validación.
"""

# Descarga de fuentes
!wget -q https://github.com/MaxGhenis/random/raw/master/Roboto-Regular.ttf
!wget -q https://github.com/google/fonts/raw/main/ofl/lato/Lato-Bold.ttf
!wget -q https://github.com/FrancesCoronel/nyt-comm/raw/master/fonts/cheltenham/cheltenham-normal-200.ttf
!wget -q https://github.com/mathew-kurian/Sandbox/raw/master/TextJustify/app/src/main/assets/fonts/nyt-cheltenham-bold.ttf

# Importar matplotlib.font_manager y agregar las fuentes descargadas
from matplotlib import font_manager
font_manager.fontManager.addfont('Roboto-Regular.ttf')
font_manager.fontManager.addfont('Lato-Bold.ttf')
font_manager.fontManager.addfont('cheltenham-normal-200.ttf')
font_manager.fontManager.addfont('nyt-cheltenham-bold.ttf')

# Validar que las fuentes estén disponibles
font_manager.fontManager.ttflist[-4:]

"""Carga de módulos para el manejo y visualización de datos."""

# Importar herramientas MatplotLib, Pandas y NumPy
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.ticker as plticker
import seaborn as sns
import pandas as pd
import numpy as np

"""**Decarga, Manejo y Preparación de datos**

Descarga de datos.
"""

# Descargar de datos
drought = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-07-20/drought.csv')

# Inspeccionar sus dimensiones
drought.shape

# Ver visualmente algunas filas
drought.head(n=3)

# Inspeccionar los tipos de columnas
drought.dtypes

drought.valid_start = pd.to_datetime(drought.valid_start, format='%Y-%m-%d')
drought.valid_end = pd.to_datetime(drought.valid_end, format='%Y-%m-%d')

"""Manejo de datos."""

# Asignar region por estado
WEST = ["WA", "OR", "CA", "MT", "ID", "WY", "NV", "UT", "CO", "AZ", "NM"]
MIDWEST = ["ND", "SD", "NE", "KS", "MN", "IA", "MO", "WI", "IL", "MI", "IN", "OH"]
SOUTH = ["OK", "TX", "AR", "LA", "KY", "TN", "MS", "AL", "WV", "VA", "MD", "DE",
           "NC", "SC", "GA", "FL", "DC"]
NORTHEAST = ["PA", "NY", "NJ", "VT", "NH", "ME", "MA", "CT", "RI"]
NONMAINLAND = ["AK", "HI", "PR"]


states_by_region = pd.DataFrame({
  # etiquetas de estados abreviados
  'state_abb': WEST + MIDWEST + SOUTH + NORTHEAST + NONMAINLAND,
  # se repite etiquetas el número de veces necesario y se concatena
  'region': ['WEST']*len(WEST) + ['MIDWEST']*len(MIDWEST) + ['SOUTH']*len(SOUTH) +\
 ['NORTHEAST']*len(NORTHEAST) + ['NONMAINLAND']*len(NONMAINLAND)
})

states_by_region.head(n=2)

drought = drought.merge(states_by_region, on = 'state_abb')

drought.head(n=2)

drought_west = drought[(drought.region == 'WEST') & (drought.drought_lvl != 'None')]

drought_west.shape

west_agg = drought_west.groupby(['valid_start', 'drought_lvl']).mean().reset_index()

west_agg.head(n=2)

"""Filtrado por zona y nivel de sequía."""

plt_west = west_agg.loc[:, ['valid_start', 'drought_lvl', 'area_pct']].pivot('valid_start', 'drought_lvl').reset_index()

plt_west.head(n=5)

# Acceder a cada columna
plt_west['area_pct']['D0']

# Filtrar nivel de sequía
drought_lvl = {'D0': 'Anormalmente Seco',
               'D1': 'Moderada',
               'D2': 'Severa',
               'D3': 'Extrema',
               'D4': 'Sequía Excepcional'}

"""**Visualización**

Preparación y configuración.
"""

# Lista de columna a stackear
stacked_lvl = []
for col in plt_west['area_pct']:
  stacked_lvl.append(list(plt_west['area_pct'][col]))

mpl.rcParams.update({
                     'font.size' : 3,
                     'font.family': 'NYTCheltenham',
                     'figure.facecolor' : 'white',
                     # Ejes:
                     'axes.facecolor': 'white',
                     'axes.labelsize' : 3,
                     'axes.titlesize' : 2,
                     'axes.xmargin' : 0,
                     'axes.ymargin' : 0,
                     'axes.axisbelow': True, # Malla de fondo del gráfico
                     # tamaño letra de las etiquetas
                     'xtick.labelsize': 6,
                     'ytick.labelsize': 6,
                     'figure.dpi' : 320})

fig, ax = plt.subplots(figsize=(9.2,2.8))
LABELS =['D'+ str(x) for x in range(0,5)]

# Color acorde al contexto
color_map = ['#901d0b', '#d7563a', '#f7904d', '#fab073', '#f7ee91']

# edgecolor: 'None' remueve el color del borde, o contorno, de cada área
ax.stackplot(plt_west.valid_start,
             stacked_lvl[::-1],
             edgecolor='None',
             colors=color_map)

# Agregar etiquetas para identificar cada color correspondiente
COLOR_LABEL_Y=105

ax.annotate(drought_lvl['D4'], xy=(plt_west.valid_start[0], COLOR_LABEL_Y),
            color=color_map[0], size=5,
            fontfamily='StymieNYT',
            xycoords='data', annotation_clip=False)

ax.annotate(drought_lvl['D3'], xy=(plt_west.valid_start[160], COLOR_LABEL_Y),
            color=color_map[1], size=5,
            fontfamily='StymieNYT',
            xycoords='data', annotation_clip=False)


ax.annotate(drought_lvl['D2'], xy=(plt_west.valid_start[250], COLOR_LABEL_Y),
            color=color_map[2], size=5,
            fontfamily='StymieNYT',
            xycoords='data', annotation_clip=False)


ax.annotate(drought_lvl['D1'], xy=(plt_west.valid_start[330], COLOR_LABEL_Y),
            color=color_map[3], size=5,
            fontfamily='StymieNYT',
            xycoords='data', annotation_clip=False)


ax.annotate(drought_lvl['D0'], xy=(plt_west.valid_start[430], COLOR_LABEL_Y),
            color=color_map[4], size=5,
            fontfamily='StymieNYT',
            xycoords='data', annotation_clip=False)

# Mover los tick y etiquetas del eje 'y' a la derecha,
plt.tick_params(axis='both',
                length=0,
                left=True,
                right=False,
                labelleft=True,
                labelright=False,
                grid_color='#e2e2e2',
                grid_linewidth=.5)

# [grid] habilitar gridlines eje y
plt.grid(axis='y')
plt.grid(axis='x')

# [y-axis] Formatear axes-y labels con %
ax.yaxis.set_major_formatter(plticker.PercentFormatter())

# Cambiar los valores de los tick
loc = plticker.MultipleLocator(base=25.0)
loc.tick_values(0, 100)
ax.yaxis.set_major_locator(loc)

# Disminuir grosor de la línea contorno en los bordes: superior e inferior y
# derecho e izquierda de los ejes. Además cambiar a un color grisaceo.
ax.spines['top'].set_linewidth(0.3)
ax.spines['bottom'].set_linewidth(0.3)
#ax.spines['bottom'].set_visible(False)
ax.spines['left'].set_linewidth(0.3)
ax.spines['right'].set_linewidth(0.1)
ax.spines['top'].set_color('#6e6e6e')
ax.spines['bottom'].set_color('#6e6e6e')
ax.spines['left'].set_color('#6e6e6e')
ax.spines['right'].set_color('#6e6e6e')


# [x-axis] Modificar ticks y etiquetas el eje x: cada 5 años
#ax.axes.get_xaxis().set_visible(False)
ax.xaxis.set_major_locator(mpl.dates.YearLocator(5))
ax.xaxis.set_major_formatter(mpl.dates.DateFormatter('%Y'))

# Agregar título (xy=0,0 esquina inferior izquierda, xy=1,1 esquina superior derecha)
plt.suptitle('Condiciones de sequía en porcentaje para la zona occidente',
             x=0.12, y=1.0,
             size=8.8, ha='left',
             fontfamily='StymieNYT')

# Agregar fuente de los datos:
fig.text(0.30, .02, "Fuente: U.S. Drought Monitor",
         ha='left',
         size=5, style='italic')

# Para guardar la visualización
plt.savefig('us_drought_replica_nyt.png', dpi=320,
            bbox_inches='tight')